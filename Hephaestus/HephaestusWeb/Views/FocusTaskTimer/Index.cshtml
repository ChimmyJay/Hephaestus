@{ ViewData["Title"] = "Focus Tool"; }
<head>
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
</head>
<div id="app">
    <div class="text-center">
        <div class="input-group">
            <button v-for="item in categories" class="">{{item}}</button>
        </div>
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Type task name in this"
                   v-model="FocusTask" :disabled="IsFocusing" />
            <button type="button" class="btn btn-success"
                    v-on:click="OnStartFocus" :disabled="IsFocusing">
                Start
            </button>
            <button type="button" class="btn btn-danger"
                    v-on:click="OnStopFocus" :disabled="!IsFocusing">
                Stop
            </button>
        </div>
        <div>
            <span style="font-size: 3rem">{{DisplayElapsedTime(ElapsedTime)}}</span>
        </div>
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">StartTime</th>
                        <th scope="col">EndTime</th>
                        <th scope="col">Elapsed Time</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="item in histories">
                        <td>{{item.name}}</td>
                        <td>{{displayDateTime(item.startTime)}}</td>
                        <td>{{displayDateTime(item.endTime)}}</td>
                        <td>{{DisplayElapsedTime(item.elapsedTime)}}</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    new Vue({
        el: '#app',
        data: {
            FocusTask: "",
            IsFocusing: false,
            ElapsedTime: 0,
            timer: null,
            histories: [],
            categories: []
        },
        created: function () {
            const self = this;
            fetch('FocusTaskTimer/GetFocusingTask', { method: 'GET' })
                .then(response => { return response.json(); })
                .then(data => {
                    if (data.hasFocusTask) {
                        self.FocusTask = data.taskName;
                        self.ElapsedTime = Math.floor((Date.now() - Date.parse(data.taskStartTime)) / 1000);
                        self.IsFocusing = true;
                    }
                });
            fetch('FocusTaskTimer/GetAllCategory', { method: 'GET' })
                .then(response => { return response.json(); })
                .then(data => {
                    if (data.categories) {
                        data.categories.forEach(x => self.categories.push(x));
                    }
                });
            this.updateHistories();
        },
        watch: {
            IsFocusing: function (val) {
                if (val) {
                    this.StartCalculateElapsedTime();
                } else {
                    this.StopCalculateElapsedTime();
                }
            }
        },
        methods: {
            OnStartFocus: function () {
                this.IsFocusing = true;
                fetch('FocusTaskTimer/StartFocusingTask',
                    {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            name: this.FocusTask,
                            startTime: new Date()
                        })
                    })
                    .then(response => {
                        if (response.status !== 200) {
                            alert('Occur error.');
                        }
                    });
            },
            OnStopFocus: function () {
                const self = this;
                self.IsFocusing = false;
                fetch('FocusTaskTimer/StopFocusingTask',
                    {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            endTime: new Date()
                        })
                    })
                    .then(response => {
                        if (response.status !== 200) {
                            alert('Occur error.');
                        } else {
                            self.updateHistories();
                        }
                    });

            },
            StartCalculateElapsedTime: function () {
                const self = this;
                this.timer = setInterval(() => { self.ElapsedTime += 1; }, 1000);
            },
            StopCalculateElapsedTime: function () {
                const timer = this.timer;
                if (timer) {
                    clearInterval(timer);
                }
                this.ElapsedTime = 0;
            },
            DisplayElapsedTime: function (elapsedTime) {
                const date = new Date(0);
                date.setSeconds(elapsedTime);
                return date.toISOString().substr(11, 8);
            },
            updateHistories: function () {
                const self = this;
                fetch('FocusTaskTimer/GetFocusTaskHistory', { method: 'GET' })
                    .then(response => { return response.json(); })
                    .then(data => { self.histories = data; });
            },
            displayDateTime: function (utcDateTime) {
                return moment(new Date(utcDateTime)).format('YYYY-MM-DD HH:mm:ss');
            }

        }
    })
</script>